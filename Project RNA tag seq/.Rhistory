### NEED TO adjust this step depending on dimensions of heatmap.data
names(heatmap.data)
## IN THE FOLLOWING: POSITIVE VALUES MEAN ME EXPRESSION IN HIGHER IN TRAIT CODED WITH 1 COMPARED TO TRAIT CODED WITH 0
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[15:15], #trait data
y = names(heatmap.data)[1:14], #ME data
col = c("blue1", "skyblue", "white", "pink", "red"))
## IN THE FOLLOWING: POSITIVE VALUES MEAN ME EXPRESSION IN HIGHER IN TRAIT CODED WITH 1 COMPARED TO TRAIT CODED WITH 0
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[15:15], #trait data
y = names(heatmap.data)[1:14], #ME data
col = c("blue1", "skyblue", "white", "pink", "red"),
xlab=NULL)
## IN THE FOLLOWING: POSITIVE VALUES MEAN ME EXPRESSION IN HIGHER IN TRAIT CODED WITH 1 COMPARED TO TRAIT CODED WITH 0
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[15:15], #trait data
y = names(heatmap.data)[1:14], #ME data
col = c("blue1", "skyblue", "white", "pink", "red"),
xlab="Group")
## IN THE FOLLOWING: POSITIVE VALUES MEAN ME EXPRESSION IN HIGHER IN TRAIT CODED WITH 1 COMPARED TO TRAIT CODED WITH 0
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[15:15], #trait data
y = names(heatmap.data)[1:14], #ME data
col = c("blue1", "skyblue", "white", "pink", "red"),
titleX = "Group")
## IN THE FOLLOWING: POSITIVE VALUES MEAN ME EXPRESSION IN HIGHER IN TRAIT CODED WITH 1 COMPARED TO TRAIT CODED WITH 0
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[15:15], #trait data
y = names(heatmap.data)[1:14], #ME data
col = c("blue1", "skyblue", "white", "pink", "red"),
main = "X")
main = "WGCNA Module Eigengenes - LH",
## IN THE FOLLOWING: POSITIVE VALUES MEAN ME EXPRESSION IN HIGHER IN TRAIT CODED WITH 1 COMPARED TO TRAIT CODED WITH 0
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[15:15], #trait data
y = names(heatmap.data)[1:14], #ME data
col = c("blue1", "skyblue", "white", "pink", "red"),
main = "WGCNA Module Eigengenes - LH"
)
## IN THE FOLLOWING: POSITIVE VALUES MEAN ME EXPRESSION IN HIGHER IN TRAIT CODED WITH 1 COMPARED TO TRAIT CODED WITH 0 - specifically positive = higher in stressed
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[15:15], #trait data
y = names(heatmap.data)[1:14], #ME data
col = c("blue3", "skyblue", "white", "#f7ab5e", "orange2"),
main = "WGCNA Module Eigengenes - LH"
)
## IN THE FOLLOWING: POSITIVE VALUES MEAN ME EXPRESSION IN HIGHER IN TRAIT CODED WITH 1 COMPARED TO TRAIT CODED WITH 0 - specifically positive = higher in stressed
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[15:15], #trait data
y = names(heatmap.data)[1:14], #ME data
col = c("blue3", "skyblue", "white", "#f7ab5e", "orange2"),
main = "WGCNA Module Eigengenes - LH",
posColKey = NULL
)
## IN THE FOLLOWING: POSITIVE VALUES MEAN ME EXPRESSION IN HIGHER IN TRAIT CODED WITH 1 COMPARED TO TRAIT CODED WITH 0 - specifically positive = higher in stressed
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[15:15], #trait data
y = names(heatmap.data)[1:14], #ME data
col = c("blue3", "skyblue", "white", "#f7ab5e", "orange2"),
main = "WGCNA Module Eigengenes - LH",
posColKey = NA
)
## IN THE FOLLOWING: POSITIVE VALUES MEAN ME EXPRESSION IN HIGHER IN TRAIT CODED WITH 1 COMPARED TO TRAIT CODED WITH 0 - specifically positive = higher in stressed
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[15:15], #trait data
y = names(heatmap.data)[1:14], #ME data
col = c("blue3", "skyblue", "white", "#f7ab5e", "orange2"),
main = "WGCNA Module Eigengenes - LH",
posColKey = FALSE
)
## IN THE FOLLOWING: POSITIVE VALUES MEAN ME EXPRESSION IN HIGHER IN TRAIT CODED WITH 1 COMPARED TO TRAIT CODED WITH 0 - specifically positive = higher in stressed
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[15:15], #trait data
y = names(heatmap.data)[1:14], #ME data
col = c("blue3", "skyblue", "white", "#f7ab5e", "orange2"),
main = "WGCNA Module Eigengenes - LH",
posColKey = FALSE
)
## IN THE FOLLOWING: POSITIVE VALUES MEAN ME EXPRESSION IN HIGHER IN TRAIT CODED WITH 1 COMPARED TO TRAIT CODED WITH 0 - specifically positive = higher in stressed
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[15:15], #trait data
y = names(heatmap.data)[1:14], #ME data
col = c("blue3", "skyblue", "white", "#f7ab5e", "orange2"),
main = "WGCNA Module Eigengenes - LH"
)
## IN THE FOLLOWING: POSITIVE VALUES MEAN ME EXPRESSION IN HIGHER IN TRAIT CODED WITH 1 COMPARED TO TRAIT CODED WITH 0 - specifically positive = higher in stressed
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[15:15], #trait data
y = names(heatmap.data)[1:14], #ME data
col = c("blue3", "skyblue", "white", "#f7ab5e", "orange2"),
main = "WGCNA Module Eigengenes - LH",
cexLabX = 0.0
)
## IN THE FOLLOWING: POSITIVE VALUES MEAN ME EXPRESSION IN HIGHER IN TRAIT CODED WITH 1 COMPARED TO TRAIT CODED WITH 0 - specifically positive = higher in stressed
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[15:15], #trait data
y = names(heatmap.data)[1:14], #ME data
col = c("blue3", "skyblue", "white", "#f7ab5e", "orange2"),
main = "WGCNA Module Eigengenes - LH",
cexLabX = NA
)
## IN THE FOLLOWING: POSITIVE VALUES MEAN ME EXPRESSION IN HIGHER IN TRAIT CODED WITH 1 COMPARED TO TRAIT CODED WITH 0 - specifically positive = higher in stressed
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[15:15], #trait data
y = names(heatmap.data)[1:14], #ME data
col = c("blue3", "skyblue", "white", "#f7ab5e", "orange2"),
main = "WGCNA Module Eigengenes - LH",
cexLabX = NULL
)
## IN THE FOLLOWING: POSITIVE VALUES MEAN ME EXPRESSION IN HIGHER IN TRAIT CODED WITH 1 COMPARED TO TRAIT CODED WITH 0 - specifically positive = higher in stressed
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[15:15], #trait data
y = names(heatmap.data)[1:14], #ME data
col = c("blue3", "skyblue", "white", "#f7ab5e", "orange2"),
main = "WGCNA Module Eigengenes - LH",
cexLabX = NULL
)
## IN THE FOLLOWING: POSITIVE VALUES MEAN ME EXPRESSION IN HIGHER IN TRAIT CODED WITH 1 COMPARED TO TRAIT CODED WITH 0 - specifically positive = higher in stressed
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[15:15], #trait data
y = names(heatmap.data)[1:14], #ME data
col = c("blue3", "skyblue", "white", "#f7ab5e", "orange2"),
main = "WGCNA Module Eigengenes - LH",
cexLabX = FALSE
)
## IN THE FOLLOWING: POSITIVE VALUES MEAN ME EXPRESSION IN HIGHER IN TRAIT CODED WITH 1 COMPARED TO TRAIT CODED WITH 0 - specifically positive = higher in stressed
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[15:15], #trait data
y = names(heatmap.data)[1:14], #ME data
col = c("blue3", "skyblue", "white", "#f7ab5e", "orange2"),
main = "WGCNA Module Eigengenes - LH",
cexLabX = 0
)
## IN THE FOLLOWING: POSITIVE VALUES MEAN ME EXPRESSION IN HIGHER IN TRAIT CODED WITH 1 COMPARED TO TRAIT CODED WITH 0 - specifically positive = higher in stressed
CorLevelPlot(heatmap.data,
y = names(heatmap.data)[1:14], #ME data
col = c("blue3", "skyblue", "white", "#f7ab5e", "orange2"),
main = "WGCNA Module Eigengenes - LH"
)
## IN THE FOLLOWING: POSITIVE VALUES MEAN ME EXPRESSION IN HIGHER IN TRAIT CODED WITH 1 COMPARED TO TRAIT CODED WITH 0 - specifically positive = higher in stressed
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[15:15], #trait data
y = names(heatmap.data)[1:14], #ME data
col = c("blue3", "skyblue", "white", "#f7ab5e", "orange2"),
main = "WGCNA Module Eigengenes - LH",
fontLabX = 0
)
## IN THE FOLLOWING: POSITIVE VALUES MEAN ME EXPRESSION IN HIGHER IN TRAIT CODED WITH 1 COMPARED TO TRAIT CODED WITH 0 - specifically positive = higher in stressed
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[15:15], #trait data
y = names(heatmap.data)[1:14], #ME data
col = c("blue3", "skyblue", "white", "#f7ab5e", "orange2"),
main = "WGCNA Module Eigengenes - LH",
fontLabX = 2
)
## IN THE FOLLOWING: POSITIVE VALUES MEAN ME EXPRESSION IN HIGHER IN TRAIT CODED WITH 1 COMPARED TO TRAIT CODED WITH 0 - specifically positive = higher in stressed
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[15:15], #trait data
y = names(heatmap.data)[1:14], #ME data
col = c("blue3", "skyblue", "white", "#f7ab5e", "orange2"),
main = "WGCNA Module Eigengenes - LH",
fontLabX = 3
)
## IN THE FOLLOWING: POSITIVE VALUES MEAN ME EXPRESSION IN HIGHER IN TRAIT CODED WITH 1 COMPARED TO TRAIT CODED WITH 0 - specifically positive = higher in stressed
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[15:15], #trait data
y = names(heatmap.data)[1:14], #ME data
col = c("blue3", "skyblue", "white", "#f7ab5e", "orange2"),
main = "WGCNA Module Eigengenes - LH",
fontLabX = NA
)
## IN THE FOLLOWING: POSITIVE VALUES MEAN ME EXPRESSION IN HIGHER IN TRAIT CODED WITH 1 COMPARED TO TRAIT CODED WITH 0 - specifically positive = higher in stressed
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[15:15], #trait data
y = names(heatmap.data)[1:14], #ME data
col = c("blue3", "skyblue", "white", "#f7ab5e", "orange2"),
main = "WGCNA Module Eigengenes - LH",
fontLabX = NULL
)
## IN THE FOLLOWING: POSITIVE VALUES MEAN ME EXPRESSION IN HIGHER IN TRAIT CODED WITH 1 COMPARED TO TRAIT CODED WITH 0 - specifically positive = higher in stressed
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[15:15], #trait data
y = names(heatmap.data)[1:14], #ME data
col = c("blue3", "skyblue", "white", "#f7ab5e", "orange2"),
main = "WGCNA Module Eigengenes - LH",
fontLabX = 0
)
## IN THE FOLLOWING: POSITIVE VALUES MEAN ME EXPRESSION IN HIGHER IN TRAIT CODED WITH 1 COMPARED TO TRAIT CODED WITH 0 - specifically positive = higher in stressed
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[15:15], #trait data
y = names(heatmap.data)[1:14], #ME data
col = c("blue3", "skyblue", "white", "#f7ab5e", "orange2"),
main = "WGCNA Module Eigengenes - LH",
posLab = NULL
)
## IN THE FOLLOWING: POSITIVE VALUES MEAN ME EXPRESSION IN HIGHER IN TRAIT CODED WITH 1 COMPARED TO TRAIT CODED WITH 0 - specifically positive = higher in stressed
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[15:15], #trait data
y = names(heatmap.data)[1:14], #ME data
col = c("blue3", "skyblue", "white", "#f7ab5e", "orange2"),
main = "WGCNA Module Eigengenes - LH",
posLab = NULL
)
## IN THE FOLLOWING: POSITIVE VALUES MEAN ME EXPRESSION IN HIGHER IN TRAIT CODED WITH 1 COMPARED TO TRAIT CODED WITH 0 - specifically positive = higher in stressed
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[15:15], #trait data
y = names(heatmap.data)[1:14], #ME data
col = c("blue3", "skyblue", "white", "#f7ab5e", "orange2"),
main = "WGCNA Module Eigengenes - LH",
posLab = 0
)
module.gene.mapping <- as.data.frame(bwnet$colors)
## FROM HERE, CAN PERFORM FURTHER ANALYSIS ON GENES IN IMPORTANT MODULES - the following lists the genes in relevant modules that are selected from above analysis to be modules that are differentially expressed between groups
## THIS ME has LOWER expression in Stress
module.gene.mapping %>%
filter(`bwnet$colors` == 'yellow') %>%
rownames()
## THIS ME has HIGHER expression in Stress
module.gene.mapping %>%
filter(`bwnet$colors` == 'magenta') %>%
rownames()
# 6B. Intramodular analysis: Identifying driver genes ---------------
#"highly connected intramodular hub genes"
# Calculate the module membership and the associated p-values
# The module membership/intramodular connectivity is calculated as the correlation of the eigengene and the gene expression profile.
# This quantifies the similarity of all genes on the array to every module.
module.membership.measure <- cor(module_eigengenes, norm.counts, use = 'p')
module.membership.measure.pvals <- corPvalueStudent(module.membership.measure, nSamples)
module.membership.measure[1:10,1:10]
module.membership.measure.pvals[1:10,1:10] # just a check that this ran right
# Calculate the gene significance and associated p-values
#correlate expression data with trait of interest - FOR ME, JUST stress_bin
gene.signf.corr <- cor(norm.counts, traits$stress_bin, use = 'p')
gene.signf.corr.pvals <- corPvalueStudent(gene.signf.corr, nSamples)
gene.signf.corr.pvals %>%
as.data.frame() %>%
arrange(V1) %>%
head(25)
#top 25 genes in the LH sig associated with stress experience
### NEED TO DO SOMETHING SIMILAR TO THIS *JUST* WITHIN SIG MODULES - GET "HIGHEST MM GENES"   ### basically take module.membership.measure.pvals, flip orientation, filter only relevant module, then arrange(V1)
# Using the gene significance you can identify genes that have a high significance for trait of interest
# Using the module membership measures you can identify genes with high module membership in interesting modules.
#### FOLLOWUP ANALYSIS OF VARIOUS THINGS FOUND ABOVE
library(clusterProfiler)
library(enrichplot)
library(biomaRt)
library(AnnotationDbi)
library(annotables)
grcm38 <- grcm38
source("functions/gettop10GO.R")
#1st - pull LH_limma_results1 <- readRDS("results/LH_limma_results.RDS")
#2nd - filter genes that are only in modules of interest - call them MEcolor
#3rd - attach LH_limma_results1 to filteres MEcolor datasets
#4th - do GO analysis of merged MEcolor-limma datasets
#5th - and highest MM ranking of MEcolor datasets
## steps 1-3
LH_limma_results1 <- readRDS("results/LH_limma_results.RDS")
MEallcolors <- tibble::rownames_to_column(module.gene.mapping, "symbol")
colnames(MEallcolors)[2] <- "MEcolor"
gene.signf.corr2 <- as.data.frame(gene.signf.corr)
gene.signf.corr2 <- tibble::rownames_to_column(gene.signf.corr2, "symbol")
colnames(gene.signf.corr2)[2] <- "gene.signif.corr"
gene.signf.corr.pvals2 <- as.data.frame(gene.signf.corr.pvals)
gene.signf.corr.pvals2 <- tibble::rownames_to_column(gene.signf.corr.pvals2, "symbol")
colnames(gene.signf.corr.pvals2)[2] <- "gene.signif.corr.pval"
MEallcolors2 <- left_join(MEallcolors, gene.signf.corr2, by = "symbol") %>%
left_join(., gene.signf.corr.pvals2, by = "symbol")
write.csv(MEallcolors2, "results/MEallcolors_LH.csv")
MEyellow <- MEallcolors2 %>%
filter(MEcolor == "yellow")
MEyellow.limma <- LH_limma_results1 %>%
left_join(MEyellow, by = "symbol") %>%
filter(!is.na(MEcolor)) %>%
select(1,2,3,4,10,11,12,13)
write.csv(MEyellow.limma, "results/LH_MEyellow_limma.csv")
MEmagenta <- MEallcolors2 %>%
filter(MEcolor == "magenta")
MEmagenta.limma <- LH_limma_results1 %>%
left_join(MEmagenta, by = "symbol") %>%
filter(!is.na(MEcolor)) %>%
select(1,2,3,4,10,11,12,13)
write.csv(MEmagenta.limma, "results/LH_MEmagenta_limma.csv")
## GO ANALYSIS OF YELLOW MODULE
gettop10GO(MEyellow.limma, my_showCategory) %>%
mutate(comparison = "Control - Stress") -> GOterms_LH_yellow
write.csv(GOterms_LH_yellow, "results/GOterms_LH_yellow.csv")
## HIGHEST MM OF YELLOW MODULE
MEyellow.limma %>%
arrange(gene.signif.corr.pval) %>%
head(5)
## GO ANALYSIS OF MAGENTA MODULE
gettop10GO(MEmagenta.limma, my_showCategory) %>%
mutate(comparison = "Control - Stress") -> GOterms_LH_magenta
write.csv(GOterms_LH_magenta, "results/GOterms_LH_magenta.csv")
## HIGHEST MM OF MAGENTA MODULE
MEmagenta.limma %>%
arrange(gene.signif.corr.pval) %>%
head(5)
# pairwise comparisons of normalized expression of important genes
# selected by large logFC, MEcolor strength, and theoretical importance
library(WGCNA)
library(DESeq2)
library(GEOquery)
library(CorLevelPlot)
library(gridExtra)
library(clusterProfiler)
library(enrichplot)
library(biomaRt)
library(AnnotationDbi)
library(annotables)
grcm38 <- grcm38
library(ggpubr)
library(tidyverse)
#### making normalized counts - shouldn't need to be done again ####
data <- read.csv("ham_brain_data/LH_counts.csv")
phenoData <- read.csv("ham_brain_data/LH_id.csv")
data[1:10, 1:10]
head(phenoData)
# prepare data
data <- data %>%
gather(key = "samples", value = "counts", -X) %>%
rename(gene = X) %>%
inner_join(., phenoData, by = c("samples" = "X")) %>%
select(1, 3, 4) %>%
spread(key = "subject", value = "counts") %>%
column_to_rownames(var = "gene") %>%
slice(-1:-5)
# 2. QC - outlier detection ------------------------------------------------
# detect outlier genes
gsg <- goodSamplesGenes(t(data))
summary(gsg)
gsg$allOK
table(gsg$goodGenes)
table(gsg$goodSamples)
# remove genes that are detected as outliers
data <- data[gsg$goodGenes == TRUE,]
# detect outlier samples - hierarchical clustering - method 1
htree <- hclust(dist(t(data)), method = "average")
# plot(htree)
# KM193 potentially seems like an outlier sample
# # pca - method 2 for finding outliers
#
# pca <- prcomp(t(data))
# pca.dat <- pca$x
#
# pca.var <- pca$sdev^2
# pca.var.percent <- round(pca.var/sum(pca.var)*100, digits = 2)
#
# pca.dat <- as.data.frame(pca.dat)
#
# ggplot(pca.dat, aes(PC1, PC2)) +
#   geom_point() +
#   geom_text(label = rownames(pca.dat)) +
#   labs(x = paste0('PC1: ', pca.var.percent[1], ' %'),
#        y = paste0('PC2: ', pca.var.percent[2], ' %'))
# #KM193 again seems like a potential outlier
# exclude outlier samples
samples.to.be.excluded <- c('KM193')
data.subset <- data[,!(colnames(data) %in% samples.to.be.excluded)]
### ***  note in results that we exclude KM193 because of higher variance compared to all other samples
# 3. Normalization ----------------------------------------------------------------------
# create a deseq2 dataset
phenoData <- phenoData %>%
column_to_rownames(var = "subject")
# exclude outlier samples
colData <- phenoData %>%
filter(!row.names(.) %in% samples.to.be.excluded)
# fixing column names in colData
names(colData)
# selecting relevant info
colData <- colData %>%
select(3, 10, 11, 13, 14, 15, 20, 22)
# making the rownames and column names identical
all(rownames(colData) %in% colnames(data.subset))
all(rownames(colData) == colnames(data.subset))
# create dds
dds <- DESeqDataSetFromMatrix(countData = data.subset,
colData = colData,
design = ~ 1) # not specifying model "because we need this DSeq data set to perform variance stabilizing transformation"
## remove all genes with counts < 10 in more than 3 samples -- here, same as DEseq2 guide
dds75 <- dds[rowSums(counts(dds) >= 10) >= 3,]
nrow(dds75) #
# perform variance stabilization
dds_norm <- vst(dds75)
# get normalized counts
norm.counts <- assay(dds_norm) %>%
t()
norm.counts2 <- norm.counts
norm.counts2 <- as.data.frame(norm.counts2)
norm.counts3 <- tibble::rownames_to_column(norm.counts2, "subject")
colData2 <- tibble::rownames_to_column(colData, "subject")
normcounts.coldata.LH <- cbind(colData2, norm.counts3)
write.csv(normcounts.coldata.LH, "results/normcounts_coldata_LH.csv")
#### shouldn't need to do above again ####
normcounts.coldata.LH <- read.csv("results/normcounts_coldata_LH.csv")
normcounts.coldata.LH$X <- NULL
LH_limma_results1 <- readRDS("results/LH_limma_results.RDS")
LH_limma_results1 <- LH_limma_results1 %>%
select(1,2,3,9,10)
LH_MEyellow_limma <- read.csv("results/LH_MEyellow_limma.csv") #LOWER expression in Stress
LH_MEyellow_limma$X <- NULL
LH_MEmagenta_limma <- read.csv("results/LH_MEmagenta_limma.csv") #HIGHER expression in Stress
LH_MEmagenta_limma$X <- NULL
### top 15 biggest logFC genes
LH_limma_results1 %>%
arrange(logFC) %>%
head(25)
LH_limma_results1 %>%
arrange(-logFC) %>%
head(25)
#visualize some favorites
ggplot(normcounts.coldata.LH, aes(x=group,y=Hcrt, fill=group)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(position = position_jitter(width = .1)) +
stat_compare_means(method = "t.test") +
ggtitle("Hcrt")
# hcrt - save as w400 h600
ggplot(normcounts.coldata.LH, aes(group, Hcrt, fill=group)) +
stat_compare_means(method = "t.test", size = 6, label.x = 0.8) +
geom_boxplot(outlier.shape=NA) +
geom_jitter(size = 4, position=position_jitter(0.15)) +
scale_fill_manual(values=c("blue3", "orange2")) +
labs(title="C. LH - Hcrt",x="Group", y = "Normalized gene expression") +
theme_classic() +
theme(axis.line = element_line(colour = 'black', size = 1),
axis.ticks = element_line(colour = "black", size = 1),
legend.position="none",
axis.text=element_text(size=16),
axis.title=element_text(size=18,face="bold"),
plot.title = element_text(size=24, hjust = 0.4))
# ggplot(normcounts.coldata.LH, aes(x=Hcrt,y=wt.rate.pct, color=group)) +
#   geom_smooth(method="lm") +
#   geom_point()
#
# ggplot(normcounts.coldata.LH, aes(x=Hcrt,y=food.eff, color=group)) +
#   geom_smooth(method="lm") +
#   geom_point()
#
# ggplot(normcounts.coldata.LH, aes(x=Hcrt,y=food.total, color=group)) +
#   geom_smooth(method="lm") +
#   geom_point()
#
# ggplot(normcounts.coldata.LH, aes(x=Hcrt,y=wt.day.15, color=group)) +
#   geom_smooth(method="lm") +
#   geom_point()
#
# ggplot(normcounts.coldata.LH, aes(x=Hcrt,y=total.fat, color=group)) +
#   geom_smooth(method="lm") +
#   geom_point()
#
# ggplot(normcounts.coldata.LH, aes(x=Hcrt,y=g.hoarded, color=group)) +
#   geom_smooth(method="lm") +
#   geom_point()
#
# ggscatter(normcounts.coldata.LH, x="Hcrt", y="wt.rate.pct", add="reg.line")+
#   stat_cor(label.x = 8, size = 6) +
#   scale_fill_manual(values=c("white", "darkgray")) +
#   labs(title="Hcrt & rate of weight gain") +
#   theme_classic() +
#   theme(axis.line = element_line(colour = 'black', size = 1),
#         axis.ticks = element_line(colour = "black", size = 1),
#         legend.position="none",
#         axis.text=element_text(size=16),
#         axis.title=element_text(size=18,face="bold"),
#         plot.title = element_text(size=24, hjust = 0.4))
# Mc3r - save as w400 h600
ggplot(normcounts.coldata.LH, aes(group, Mc3r, fill=group)) +
stat_compare_means(method = "t.test", size = 6, label.x = 0.8) +
geom_boxplot(outlier.shape=NA) +
geom_jitter(size = 4, position=position_jitter(0.15)) +
scale_fill_manual(values=c("blue3", "orange2")) +
labs(title="D. LH - Mc3r",x="Group", y = "Normalized gene expression") +
theme_classic() +
theme(axis.line = element_line(colour = 'black', size = 1),
axis.ticks = element_line(colour = "black", size = 1),
legend.position="none",
axis.text=element_text(size=16),
axis.title=element_text(size=18,face="bold"),
plot.title = element_text(size=24, hjust = 0.4))
# Npvf - save as w400 h600
ggplot(normcounts.coldata.LH, aes(group, Npvf, fill=group)) +
stat_compare_means(method = "t.test", size = 6, label.x = 0.8) +
geom_boxplot(outlier.shape=NA) +
geom_jitter(size = 4, position=position_jitter(0.15)) +
scale_fill_manual(values=c("blue3", "orange2")) +
labs(title="E. LH - Npvf",x="Group", y = "Normalized gene expression") +
theme_classic() +
theme(axis.line = element_line(colour = 'black', size = 1),
axis.ticks = element_line(colour = "black", size = 1),
legend.position="none",
axis.text=element_text(size=16),
axis.title=element_text(size=18,face="bold"),
plot.title = element_text(size=24, hjust = 0.4))
# Gpr50 - save as w400 h600
ggplot(normcounts.coldata.LH, aes(group, Gpr50, fill=group)) +
stat_compare_means(method = "t.test", size = 6, label.x = 0.8) +
geom_boxplot(outlier.shape=NA) +
geom_jitter(size = 4, position=position_jitter(0.15)) +
scale_fill_manual(values=c("blue3", "orange2")) +
labs(title="F. LH - Gpr50",x="Group", y = "Normalized gene expression") +
theme_classic() +
theme(axis.line = element_line(colour = 'black', size = 1),
axis.ticks = element_line(colour = "black", size = 1),
legend.position="none",
axis.text=element_text(size=16),
axis.title=element_text(size=18,face="bold"),
plot.title = element_text(size=24, hjust = 0.4))
#### Pairwise of High ME MM genes - yellow
# find these
LH_MEyellow_limma %>%
arrange(gene.signif.corr.pval) %>%
head(5)
